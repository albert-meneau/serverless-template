# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service:                 my-service-name
frameworkVersion:        ">=1.6.0 <2.0.0" # can deploy with specific Serverless version

provider:                
  name:                  aws
  runtime:               nodejs4.3  #can also be nodejs6.10
  memorySize:            1024 # max 1536
  timeout:               30
  region:                us-east-1
  stage:                 ${opt:stage, self:custom.defaultStage}
  role:                  arn:aws:iam::${self:custom.accountId}:role/${self:custom.defaultStage}-cs-lambda #default Content-Services lambda role. Can specify role specific to your lambda
  deploymentBucket:      ${file(./config/${self:custom.defaultStage}.yml):s3.bucket} #defaylt Content-Services bucket. This reduces time on bucket creation and all our lambda files are found in 1 bucket
  stackTags:             #default tags
    team:                content-services
    account:             ${self:custom.defaultStage}
    service:             my-service-name
    environment:         ${self:custom.environmentName}
  environment:           #service-wide environment variables
    NODE_ENV:            ${opt:NODE_ENV, env:NODE_ENV}
    TOKEN_CLIENT_ID:     ${opt:TOKEN_CLIENT_ID, env:TOKEN_CLIENT_ID}
    TOKEN_CLIENT_SECRET: ${opt:TOKEN_CLIENT_SECRET, env:TOKEN_CLIENT_SECRET}

custom:                  
  defaultStage:          ${env:ENV_SHORTNAME} #dev | stg | prd
  accountId:             ${env:AWS_ACCOUNT_ID}
  environmentName:       ${env:NODE_ENV} #test | development | staging | production

package:                 
  individually:          true
  exclude:               ${file(./deployment.yml):service.exclude}
  include:               ${file(./deployment.yml):service.include}

functions:               
  sampleLambda:          
    handler:             functions/sampleLambda/index.run
    name:                ${self:service}-sampleLambda
    description:         Sample Lambda
    memorySize:          1024
    timeout:             300
    package:             
      exclude:           ${file(./deployment.yml):lambdas.sampleLambda.exclude}
      include:           ${file(./deployment.yml):lambdas.sampleLambda.include}
    events:              
      - schedule:        #if you need a scheduled lambda
          rate:          ${file(./functions/config/${self:custom.defaultStage}.yml):sampleLambda.scheduleRate}
          name:          ${self:service}-sampleLambda-schedule
      - http:            #if you have an api
          path:          ${self:service}/path
          method:        get
          cors:          true
  
  anotherLambda:         
    handler:             functions/sampleLambda/index.run
    name:                ${selfservice}-sampleLambda
    description:         Sample Lambda
    memorySize:          1024
    timeout:             300
    package:             
      exclude:           ${file(./deployment.yml):lambdas.sampleLambda.exclude}
      include:           ${file(./deployment.yml):lambdas.sampleLambda.include}
    events:              
      - http:            #if you have an api
          path:          ${self:service}/path
          method:        get
          cors:          true
      #additional lambda information
      #- s3: some-s3-bucket
      #- sns: some-topic
      #- stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
    environment:         #define function environment variables here
      envVariable1:      value1

#add any additional plugins you need https://github.com/serverless/plugins
#plugins:                 
#  - serverless-mocha-plugin

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
